// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using shop.Data.Context;

#nullable disable

namespace shop.Data.Migrations
{
    [DbContext(typeof(ShopDbContext))]
    [Migration("20230703092441_addExampleData2")]
    partial class addExampleData2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("AppRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("AppUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AppUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("AppUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            RoleId = new Guid("1090dcdd-b383-417b-9523-d73f0373fbb0")
                        },
                        new
                        {
                            UserId = new Guid("c2ec6dd4-8170-4b6d-acf4-33d52a128789"),
                            RoleId = new Guid("4a1c9012-a602-46a9-8eba-05e85149fd81")
                        },
                        new
                        {
                            UserId = new Guid("3b294e1f-c3f7-4f71-9be6-11c614fbdce5"),
                            RoleId = new Guid("66d310d2-f7e1-4aab-8003-4370144e3f8d")
                        },
                        new
                        {
                            UserId = new Guid("a2d98f29-7a98-4d0d-ba21-aa1d88c4e5c2"),
                            RoleId = new Guid("66d310d2-f7e1-4aab-8003-4370144e3f8d")
                        },
                        new
                        {
                            UserId = new Guid("b6c75c5f-9d1b-4a0d-9c6d-3e7d3ce2a2a7"),
                            RoleId = new Guid("66d310d2-f7e1-4aab-8003-4370144e3f8d")
                        },
                        new
                        {
                            UserId = new Guid("e3e4e9f8-cd6d-4299-9d8f-fb5e8ef6d0d5"),
                            RoleId = new Guid("66d310d2-f7e1-4aab-8003-4370144e3f8d")
                        },
                        new
                        {
                            UserId = new Guid("2f00b6e3-2583-4b5f-a92f-9d8f2b8d4d7f"),
                            RoleId = new Guid("66d310d2-f7e1-4aab-8003-4370144e3f8d")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AppUserTokens", (string)null);
                });

            modelBuilder.Entity("shop.Data.Entities.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("1090dcdd-b383-417b-9523-d73f0373fbb0"),
                            ConcurrencyStamp = "a7c9e6a4-4b8b-4a60-982c-4414f3e37b25",
                            Description = "Administrator role",
                            Name = "admin"
                        },
                        new
                        {
                            Id = new Guid("4a1c9012-a602-46a9-8eba-05e85149fd81"),
                            ConcurrencyStamp = "a248b3ea-0c03-4731-8d30-0512e35d4bd8",
                            Description = "Employee role",
                            Name = "employee"
                        },
                        new
                        {
                            Id = new Guid("66d310d2-f7e1-4aab-8003-4370144e3f8d"),
                            ConcurrencyStamp = "d6a4ba23-0c70-4e57-afb5-55f7dc920dc7",
                            Description = "Customer role",
                            Name = "customer"
                        });
                });

            modelBuilder.Entity("shop.Data.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DoB")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e3fa1f90-c036-420a-bd17-819bdfbda523",
                            DoB = new DateTime(2003, 11, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "cuongnguyenpm1116@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Cuong",
                            LastName = "Nguyen Phuc Minh",
                            LockoutEnabled = false,
                            NormalizedEmail = "cuongnguyenpm1116@gmail.com",
                            NormalizedUserName = "admin",
                            PasswordHash = "AQAAAAEAACcQAAAAEB+PEHqd8Jtgo/BC+3gzoSs4HeOa6HyoxmMRwNJ31io5AvSNDQEodKjEC+XpF+el1A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = new Guid("c2ec6dd4-8170-4b6d-acf4-33d52a128789"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b88158a5-9211-400d-99bc-b1021e1f42b7",
                            DoB = new DateTime(2003, 7, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "hq37na@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Hoc",
                            LastName = "Nguyen Kim",
                            LockoutEnabled = false,
                            NormalizedEmail = "hq37na@gmail.com",
                            NormalizedUserName = "kimhoc1",
                            PasswordHash = "AQAAAAEAACcQAAAAEGf3Yz4GI45wEY77pEcsIQYi89+T9FfoiMUfhl83HhebWYqULv9h293Fu4bTH31eNw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "kimhoc1"
                        },
                        new
                        {
                            Id = new Guid("3b294e1f-c3f7-4f71-9be6-11c614fbdce5"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0e5a5109-f442-4c02-92b6-2eea1fcae434",
                            DoB = new DateTime(2003, 3, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "lusdeer@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Hieu",
                            LastName = "Le Minh",
                            LockoutEnabled = false,
                            NormalizedEmail = "lusdeer@gmail.com",
                            NormalizedUserName = "lmaohieu1",
                            PasswordHash = "AQAAAAEAACcQAAAAEKXeWNFTLJSz+fsn9KRHoRz/TIFJzTxIEDakp4XhjKS0YGd/R0R0bPkkycsCh0JuCQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "lmaohieu1"
                        },
                        new
                        {
                            Id = new Guid("a2d98f29-7a98-4d0d-ba21-aa1d88c4e5c2"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ed282663-a2ba-4a33-86b1-69ae828ae68d",
                            DoB = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "john.doe@example.com",
                            EmailConfirmed = true,
                            FirstName = "John",
                            LastName = "Doe",
                            LockoutEnabled = false,
                            NormalizedEmail = "JOHN.DOE@EXAMPLE.COM",
                            NormalizedUserName = "JOHN.DOE",
                            PasswordHash = "AQAAAAEAACcQAAAAEAag7OiwZS79AfJmkBKQ7taUR6AgHKum5FQDThBqh6e/KxQQjNdeh7xSQL66V5yMHA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "john.doe"
                        },
                        new
                        {
                            Id = new Guid("b6c75c5f-9d1b-4a0d-9c6d-3e7d3ce2a2a7"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "95936f33-2b76-4d52-8a78-9bcd5784bc2d",
                            DoB = new DateTime(1995, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jane.doe@example.com",
                            EmailConfirmed = true,
                            FirstName = "Jane",
                            LastName = "Doe",
                            LockoutEnabled = false,
                            NormalizedEmail = "JANE.DOE@EXAMPLE.COM",
                            NormalizedUserName = "JANE.DOE",
                            PasswordHash = "AQAAAAEAACcQAAAAEFTZ5+QsAUtOeuFdfQmsA5I84dpox9HMZjavJo+FpiOnGBcQ+/jEQmuh0pqFZE5kGw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "jane.doe"
                        },
                        new
                        {
                            Id = new Guid("e3e4e9f8-cd6d-4299-9d8f-fb5e8ef6d0d5"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "44111933-dc3f-40fa-9780-e48b1b2bc83c",
                            DoB = new DateTime(1985, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "bob.smith@example.com",
                            EmailConfirmed = true,
                            FirstName = "Bob",
                            LastName = "Smith",
                            LockoutEnabled = false,
                            NormalizedEmail = "BOB.SMITH@EXAMPLE.COM",
                            NormalizedUserName = "BOB.SMITH",
                            PasswordHash = "AQAAAAEAACcQAAAAEKdBdySR73Dhi5vz8/k6HsyL7rsO0w43WTmpnofddB5b5obnZaQL5nzHJ22cQwtLeg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "bob.smith"
                        },
                        new
                        {
                            Id = new Guid("2f00b6e3-2583-4b5f-a92f-9d8f2b8d4d7f"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c49bc00b-dc57-4fb5-836a-916542a95af6",
                            DoB = new DateTime(1988, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jennifer.smith@example.com",
                            EmailConfirmed = true,
                            FirstName = "Jennifer",
                            LastName = "Smith",
                            LockoutEnabled = false,
                            NormalizedEmail = "JENNIFER.SMITH@EXAMPLE.COM",
                            NormalizedUserName = "JENNIFER.SMITH",
                            PasswordHash = "AQAAAAEAACcQAAAAEHnIO/iAxvsDbh5Ue6cwVd8g97TicTsW9xTp3+0o7OBUvGJ9L960OPLcV8hxD6Ef7g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "jennifer.smith"
                        });
                });

            modelBuilder.Entity("shop.Data.Entities.Cart", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("shop.Data.Entities.CartDetail", b =>
                {
                    b.Property<Guid>("ProductDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ProductDetailId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("CartDetails");
                });

            modelBuilder.Entity("shop.Data.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e785507b-109e-4c6e-b2f1-87a792896e3c"),
                            Name = "Áo thun",
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("d8eb1629-a276-4667-8da2-0926fc66de0c"),
                            Name = "Áo polo",
                            Status = 0
                        });
                });

            modelBuilder.Entity("shop.Data.Entities.Color", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.ToTable("Colors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("24f04c0b-34c3-428c-8767-0bb98da225e0"),
                            Name = "Đen"
                        },
                        new
                        {
                            Id = new Guid("87513ccc-798f-485a-8206-0522f1d8b0ad"),
                            Name = "Trắng"
                        },
                        new
                        {
                            Id = new Guid("070139ef-2c91-4261-af8b-c07d2a5932b3"),
                            Name = "Xám"
                        },
                        new
                        {
                            Id = new Guid("5b28789c-e43f-4e10-b447-6290d4130c66"),
                            Name = "Đỏ"
                        },
                        new
                        {
                            Id = new Guid("97e83440-0351-4d34-9964-30aa65dd9cd5"),
                            Name = "Xanh lá cây"
                        },
                        new
                        {
                            Id = new Guid("a556951b-68bd-42d2-b7b3-a765ca19edf8"),
                            Name = "Xanh dương"
                        },
                        new
                        {
                            Id = new Guid("e481bd9d-e38c-4a2b-8194-30c0f6adc380"),
                            Name = "Vàng"
                        },
                        new
                        {
                            Id = new Guid("b9ed9a3a-0098-4575-93bc-d4beda3a0c0f"),
                            Name = "Cam"
                        },
                        new
                        {
                            Id = new Guid("ee96d4a7-f5b8-4b83-b8bc-8b6d4c110e98"),
                            Name = "Hồng"
                        },
                        new
                        {
                            Id = new Guid("7f60198e-4f05-4cc5-8418-cffe41c392d4"),
                            Name = "Tím"
                        });
                });

            modelBuilder.Entity("shop.Data.Entities.Material", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.ToTable("Materials");

                    b.HasData(
                        new
                        {
                            Id = new Guid("042237d8-ce3e-4f5e-b79d-daad510a1dc4"),
                            Name = "Vải Cotton"
                        },
                        new
                        {
                            Id = new Guid("5cd1370c-dd94-4038-b33c-49a27aad25ab"),
                            Name = "Vải Excool"
                        },
                        new
                        {
                            Id = new Guid("99df0e16-bab3-4d8a-8916-72e4a03e99e4"),
                            Name = "Vải Polyester tính năng"
                        },
                        new
                        {
                            Id = new Guid("093e72f7-4bae-448c-b009-b6acf0fe9120"),
                            Name = "Vải Recycle"
                        });
                });

            modelBuilder.Entity("shop.Data.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime?>("PaidDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShipAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ShipDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShipName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ShipPhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("UserId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f602aed4-37de-446c-8b4d-d5e407a4bf33"),
                            CompletedDate = new DateTime(2023, 7, 3, 16, 24, 41, 207, DateTimeKind.Local).AddTicks(3986),
                            CreatedDate = new DateTime(2023, 6, 26, 16, 24, 41, 207, DateTimeKind.Local).AddTicks(3986),
                            OrderCode = "230703DDKbiC3SyDB9pN",
                            OrderStatus = 4,
                            PaidDate = new DateTime(2023, 6, 26, 16, 24, 41, 207, DateTimeKind.Local).AddTicks(3986),
                            ShipAddress = "123 Main St.",
                            ShipDate = new DateTime(2023, 6, 30, 16, 24, 41, 207, DateTimeKind.Local).AddTicks(3986),
                            ShipName = "Alice",
                            ShipPhoneNumber = "0123456789",
                            Total = 1000000m,
                            UserId = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de")
                        },
                        new
                        {
                            Id = new Guid("4f31c9cd-6fdf-4d3a-9d8b-6f1d3d5c1c24"),
                            CreatedDate = new DateTime(2023, 6, 26, 16, 24, 41, 207, DateTimeKind.Local).AddTicks(3986),
                            OrderCode = "230703PmyoqNWHK3LZe3",
                            OrderStatus = 3,
                            PaidDate = new DateTime(2023, 6, 26, 16, 24, 41, 207, DateTimeKind.Local).AddTicks(3986),
                            ShipAddress = "1010 Oak Dr.",
                            ShipDate = new DateTime(2023, 6, 30, 16, 24, 41, 207, DateTimeKind.Local).AddTicks(3986),
                            ShipName = "Alice",
                            ShipPhoneNumber = "0123456789",
                            Total = 2000000m,
                            UserId = new Guid("c2ec6dd4-8170-4b6d-acf4-33d52a128789")
                        },
                        new
                        {
                            Id = new Guid("7afa0b0b-1c0d-4bd4-a1e8-9f1a38a5e5ab"),
                            CreatedDate = new DateTime(2023, 6, 26, 16, 24, 41, 207, DateTimeKind.Local).AddTicks(3986),
                            OrderCode = "23070306w3xM7UGUxRrW",
                            OrderStatus = 0,
                            ShipAddress = "1111 Pine Ln.",
                            ShipName = "Alice",
                            ShipPhoneNumber = "0123456789",
                            Total = 3000000m,
                            UserId = new Guid("3b294e1f-c3f7-4f71-9be6-11c614fbdce5")
                        },
                        new
                        {
                            Id = new Guid("8fd4f3f5-4f1a-4f23-a2b0-1dbf8e9d7a9c"),
                            CompletedDate = new DateTime(2023, 7, 3, 16, 24, 41, 207, DateTimeKind.Local).AddTicks(3986),
                            CreatedDate = new DateTime(2023, 6, 26, 16, 24, 41, 207, DateTimeKind.Local).AddTicks(3986),
                            OrderCode = "230703dkb7wDTr8wQ2rR",
                            OrderStatus = 4,
                            PaidDate = new DateTime(2023, 6, 26, 16, 24, 41, 207, DateTimeKind.Local).AddTicks(3986),
                            ShipAddress = "123 Main St.",
                            ShipDate = new DateTime(2023, 6, 30, 16, 24, 41, 207, DateTimeKind.Local).AddTicks(3986),
                            ShipName = "Alice",
                            ShipPhoneNumber = "0123456789",
                            Total = 290000m,
                            UserId = new Guid("a2d98f29-7a98-4d0d-ba21-aa1d88c4e5c2")
                        },
                        new
                        {
                            Id = new Guid("e9e8d2a6-0d6c-4e28-9e9c-3d2dd6b3c5af"),
                            CreatedDate = new DateTime(2023, 6, 26, 16, 24, 41, 207, DateTimeKind.Local).AddTicks(3986),
                            OrderCode = "230703kTwGUuaOxZ5sC1",
                            OrderStatus = 0,
                            ShipAddress = "456 Elm St.",
                            ShipName = "0987654321",
                            ShipPhoneNumber = "0987654321",
                            Total = 275000m,
                            UserId = new Guid("2f00b6e3-2583-4b5f-a92f-9d8f2b8d4d7f")
                        },
                        new
                        {
                            Id = new Guid("a60b3fd4-40a0-4f4e-8f5b-6e5a9a3d63e6"),
                            CompletedDate = new DateTime(2023, 7, 3, 16, 24, 41, 207, DateTimeKind.Local).AddTicks(3986),
                            CreatedDate = new DateTime(2023, 6, 26, 16, 24, 41, 207, DateTimeKind.Local).AddTicks(3986),
                            OrderCode = "230703P1u8nabxMakypB",
                            OrderStatus = 4,
                            PaidDate = new DateTime(2023, 6, 26, 16, 24, 41, 207, DateTimeKind.Local).AddTicks(3986),
                            ShipAddress = "789 Maple Ave.",
                            ShipDate = new DateTime(2023, 6, 30, 16, 24, 41, 207, DateTimeKind.Local).AddTicks(3986),
                            ShipName = "0987654321",
                            ShipPhoneNumber = "0987654321",
                            Total = 129000m,
                            UserId = new Guid("b6c75c5f-9d1b-4a0d-9c6d-3e7d3ce2a2a7")
                        },
                        new
                        {
                            Id = new Guid("c9e9de6f-0e6f-4b3e-9f6c-3f8f3a0e6a1d"),
                            CompletedDate = new DateTime(2023, 7, 3, 16, 24, 41, 207, DateTimeKind.Local).AddTicks(3986),
                            CreatedDate = new DateTime(2023, 6, 26, 16, 24, 41, 207, DateTimeKind.Local).AddTicks(3986),
                            OrderCode = "230703i5B6qeJ2IbxBVu",
                            OrderStatus = 4,
                            PaidDate = new DateTime(2023, 6, 26, 16, 24, 41, 207, DateTimeKind.Local).AddTicks(3986),
                            ShipAddress = "1212 Cedar Blvd.",
                            ShipDate = new DateTime(2023, 6, 30, 16, 24, 41, 207, DateTimeKind.Local).AddTicks(3986),
                            ShipName = "Charlie",
                            ShipPhoneNumber = "0987654321",
                            Total = 232000m,
                            UserId = new Guid("e3e4e9f8-cd6d-4299-9d8f-fb5e8ef6d0d5")
                        });
                });

            modelBuilder.Entity("shop.Data.Entities.OrderDetail", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("OrderId", "ProductDetailId");

                    b.HasIndex("ProductDetailId");

                    b.ToTable("OrderDetails");

                    b.HasData(
                        new
                        {
                            OrderId = new Guid("f602aed4-37de-446c-8b4d-d5e407a4bf33"),
                            ProductDetailId = new Guid("9a6ccc00-6b1c-40c5-be61-eb71323c9151"),
                            Price = 199000m,
                            Quantity = 5,
                            Status = 0
                        },
                        new
                        {
                            OrderId = new Guid("f602aed4-37de-446c-8b4d-d5e407a4bf33"),
                            ProductDetailId = new Guid("3643727e-d49c-45f5-bfae-9cd4fbcebb45"),
                            Price = 199000m,
                            Quantity = 5,
                            Status = 0
                        },
                        new
                        {
                            OrderId = new Guid("4f31c9cd-6fdf-4d3a-9d8b-6f1d3d5c1c24"),
                            ProductDetailId = new Guid("b799297f-d21e-4280-8df9-a3c6788c806e"),
                            Price = 199000m,
                            Quantity = 5,
                            Status = 0
                        },
                        new
                        {
                            OrderId = new Guid("4f31c9cd-6fdf-4d3a-9d8b-6f1d3d5c1c24"),
                            ProductDetailId = new Guid("e3acb616-dd2c-44ee-93f0-754c68503b38"),
                            Price = 199000m,
                            Quantity = 5,
                            Status = 0
                        },
                        new
                        {
                            OrderId = new Guid("8fd4f3f5-4f1a-4f23-a2b0-1dbf8e9d7a9c"),
                            ProductDetailId = new Guid("f1e33f26-6797-43ae-83c5-dabb932a880e"),
                            Price = 290000m,
                            Quantity = 5,
                            Status = 0
                        },
                        new
                        {
                            OrderId = new Guid("a60b3fd4-40a0-4f4e-8f5b-6e5a9a3d63e6"),
                            ProductDetailId = new Guid("3643727e-d49c-45f5-bfae-9cd4fbcebb45"),
                            Price = 290000m,
                            Quantity = 5,
                            Status = 0
                        },
                        new
                        {
                            OrderId = new Guid("c9e9de6f-0e6f-4b3e-9f6c-3f8f3a0e6a1d"),
                            ProductDetailId = new Guid("f1e33f26-6797-43ae-83c5-dabb932a880e"),
                            Price = 290000m,
                            Quantity = 5,
                            Status = 0
                        },
                        new
                        {
                            OrderId = new Guid("e9e8d2a6-0d6c-4e28-9e9c-3d2dd6b3c5af"),
                            ProductDetailId = new Guid("f1e33f26-6797-43ae-83c5-dabb932a880e"),
                            Price = 290000m,
                            Quantity = 5,
                            Status = 0
                        },
                        new
                        {
                            OrderId = new Guid("7afa0b0b-1c0d-4bd4-a1e8-9f1a38a5e5ab"),
                            ProductDetailId = new Guid("f1e33f26-6797-43ae-83c5-dabb932a880e"),
                            Price = 199000m,
                            Quantity = 5,
                            Status = 0
                        });
                });

            modelBuilder.Entity("shop.Data.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1dc01736-d7e2-4c24-94de-00844d5cb1f9"),
                            Description = "Chất liệu: 86% Poly + 14% Spandex. Co giãn 4 chiều mang lại sự thoải mái để bạn vận động hết mình. Thiết kế công thái học, cải tiến giữ các đường may không bị mài mòn và tăng độ bền. Chất liệu thấm mồ hôi và khô nhanh, thoáng khí mang lại khả năng khô thoáng vượt trội. Form áo: Slim fit. Người mẫu: 180cm - 80kg, mặc áo size XL. Tự hào sản xuất tại Việt Nam",
                            Name = "Gym Powerfit",
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("3b997d7b-e67a-4b00-8e4a-043ce70b2844"),
                            Description = "Sản phẩm trong Bộ sưu tập Summer. Chất liệu: 100% Cotton mềm mại. Định lượng vải: 200gsm, dày dặn. Dáng áo vừa vặn, phù hợp với đi chơi, đi làm và ở nhà. Hình in PET bền bỉ, không lo bong tróc, thoải mái giặt máy. Tự hào sản xuất tại Việt Nam",
                            Name = "Cotton Summer Coolwaves",
                            Status = 0
                        });
                });

            modelBuilder.Entity("shop.Data.Entities.ProductDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ColorId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("MaterialId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("OriginalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("ProductId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SizeId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.HasIndex("MaterialId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SizeId");

                    b.ToTable("ProductDetails");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9a6ccc00-6b1c-40c5-be61-eb71323c9151"),
                            ColorId = new Guid("87513ccc-798f-485a-8206-0522f1d8b0ad"),
                            CreatedDate = new DateTime(2023, 7, 3, 16, 24, 41, 198, DateTimeKind.Local).AddTicks(1432),
                            MaterialId = new Guid("042237d8-ce3e-4f5e-b79d-daad510a1dc4"),
                            OriginalPrice = 150000m,
                            Price = 199000m,
                            ProductId = new Guid("1dc01736-d7e2-4c24-94de-00844d5cb1f9"),
                            SizeId = new Guid("573566fb-4e8c-4dad-bb2c-b2d9a597d9f7"),
                            Status = 0,
                            Stock = 50
                        },
                        new
                        {
                            Id = new Guid("3643727e-d49c-45f5-bfae-9cd4fbcebb45"),
                            ColorId = new Guid("87513ccc-798f-485a-8206-0522f1d8b0ad"),
                            CreatedDate = new DateTime(2023, 7, 3, 16, 24, 41, 198, DateTimeKind.Local).AddTicks(1445),
                            MaterialId = new Guid("042237d8-ce3e-4f5e-b79d-daad510a1dc4"),
                            OriginalPrice = 150000m,
                            Price = 199000m,
                            ProductId = new Guid("1dc01736-d7e2-4c24-94de-00844d5cb1f9"),
                            SizeId = new Guid("966f5bf6-a0a7-4d88-a700-728eb8e32c85"),
                            Status = 0,
                            Stock = 50
                        },
                        new
                        {
                            Id = new Guid("b799297f-d21e-4280-8df9-a3c6788c806e"),
                            ColorId = new Guid("87513ccc-798f-485a-8206-0522f1d8b0ad"),
                            CreatedDate = new DateTime(2023, 7, 3, 16, 24, 41, 198, DateTimeKind.Local).AddTicks(1446),
                            MaterialId = new Guid("042237d8-ce3e-4f5e-b79d-daad510a1dc4"),
                            OriginalPrice = 150000m,
                            Price = 199000m,
                            ProductId = new Guid("1dc01736-d7e2-4c24-94de-00844d5cb1f9"),
                            SizeId = new Guid("3cb61050-1fe6-4f5c-94a2-4db93e69c7ba"),
                            Status = 0,
                            Stock = 50
                        },
                        new
                        {
                            Id = new Guid("e3acb616-dd2c-44ee-93f0-754c68503b38"),
                            ColorId = new Guid("87513ccc-798f-485a-8206-0522f1d8b0ad"),
                            CreatedDate = new DateTime(2023, 7, 3, 16, 24, 41, 198, DateTimeKind.Local).AddTicks(1449),
                            MaterialId = new Guid("042237d8-ce3e-4f5e-b79d-daad510a1dc4"),
                            OriginalPrice = 200000m,
                            Price = 299000m,
                            ProductId = new Guid("1dc01736-d7e2-4c24-94de-00844d5cb1f9"),
                            SizeId = new Guid("190d7f43-6bde-4d74-a58b-e50b22b35751"),
                            Status = 0,
                            Stock = 50
                        },
                        new
                        {
                            Id = new Guid("f1e33f26-6797-43ae-83c5-dabb932a880e"),
                            ColorId = new Guid("87513ccc-798f-485a-8206-0522f1d8b0ad"),
                            CreatedDate = new DateTime(2023, 7, 3, 16, 24, 41, 198, DateTimeKind.Local).AddTicks(1450),
                            MaterialId = new Guid("042237d8-ce3e-4f5e-b79d-daad510a1dc4"),
                            OriginalPrice = 200000m,
                            Price = 299000m,
                            ProductId = new Guid("1dc01736-d7e2-4c24-94de-00844d5cb1f9"),
                            SizeId = new Guid("f6a1a967-7487-463b-9d7b-09aebf15d304"),
                            Status = 0,
                            Stock = 50
                        },
                        new
                        {
                            Id = new Guid("9610c212-5a16-4a70-8703-6bc7f1224be0"),
                            ColorId = new Guid("87513ccc-798f-485a-8206-0522f1d8b0ad"),
                            CreatedDate = new DateTime(2023, 7, 3, 16, 24, 41, 198, DateTimeKind.Local).AddTicks(1451),
                            MaterialId = new Guid("042237d8-ce3e-4f5e-b79d-daad510a1dc4"),
                            OriginalPrice = 200000m,
                            Price = 299000m,
                            ProductId = new Guid("1dc01736-d7e2-4c24-94de-00844d5cb1f9"),
                            SizeId = new Guid("aa66fbee-a9d6-4bb5-8ed8-b329d394221f"),
                            Status = 0,
                            Stock = 50
                        },
                        new
                        {
                            Id = new Guid("28c12878-b191-4d42-974a-7b823de70a06"),
                            ColorId = new Guid("24f04c0b-34c3-428c-8767-0bb98da225e0"),
                            CreatedDate = new DateTime(2023, 7, 3, 16, 24, 41, 198, DateTimeKind.Local).AddTicks(1453),
                            MaterialId = new Guid("042237d8-ce3e-4f5e-b79d-daad510a1dc4"),
                            OriginalPrice = 200000m,
                            Price = 299000m,
                            ProductId = new Guid("1dc01736-d7e2-4c24-94de-00844d5cb1f9"),
                            SizeId = new Guid("573566fb-4e8c-4dad-bb2c-b2d9a597d9f7"),
                            Status = 0,
                            Stock = 50
                        },
                        new
                        {
                            Id = new Guid("a6767d22-3ea0-4a00-ad31-9dce1d67184e"),
                            ColorId = new Guid("24f04c0b-34c3-428c-8767-0bb98da225e0"),
                            CreatedDate = new DateTime(2023, 7, 3, 16, 24, 41, 198, DateTimeKind.Local).AddTicks(1454),
                            MaterialId = new Guid("042237d8-ce3e-4f5e-b79d-daad510a1dc4"),
                            OriginalPrice = 200000m,
                            Price = 299000m,
                            ProductId = new Guid("1dc01736-d7e2-4c24-94de-00844d5cb1f9"),
                            SizeId = new Guid("966f5bf6-a0a7-4d88-a700-728eb8e32c85"),
                            Status = 0,
                            Stock = 50
                        },
                        new
                        {
                            Id = new Guid("423f83df-dc6c-4b41-aa09-2fe30e841aa6"),
                            ColorId = new Guid("24f04c0b-34c3-428c-8767-0bb98da225e0"),
                            CreatedDate = new DateTime(2023, 7, 3, 16, 24, 41, 198, DateTimeKind.Local).AddTicks(1456),
                            MaterialId = new Guid("042237d8-ce3e-4f5e-b79d-daad510a1dc4"),
                            OriginalPrice = 200000m,
                            Price = 299000m,
                            ProductId = new Guid("1dc01736-d7e2-4c24-94de-00844d5cb1f9"),
                            SizeId = new Guid("3cb61050-1fe6-4f5c-94a2-4db93e69c7ba"),
                            Status = 0,
                            Stock = 50
                        },
                        new
                        {
                            Id = new Guid("18cd05cb-f995-4b13-9fa4-a9e1f1c43862"),
                            ColorId = new Guid("24f04c0b-34c3-428c-8767-0bb98da225e0"),
                            CreatedDate = new DateTime(2023, 7, 3, 16, 24, 41, 198, DateTimeKind.Local).AddTicks(1458),
                            MaterialId = new Guid("042237d8-ce3e-4f5e-b79d-daad510a1dc4"),
                            OriginalPrice = 200000m,
                            Price = 299000m,
                            ProductId = new Guid("1dc01736-d7e2-4c24-94de-00844d5cb1f9"),
                            SizeId = new Guid("190d7f43-6bde-4d74-a58b-e50b22b35751"),
                            Status = 0,
                            Stock = 50
                        },
                        new
                        {
                            Id = new Guid("0976ba79-d822-408a-86cb-e05045db09ed"),
                            ColorId = new Guid("24f04c0b-34c3-428c-8767-0bb98da225e0"),
                            CreatedDate = new DateTime(2023, 7, 3, 16, 24, 41, 198, DateTimeKind.Local).AddTicks(1459),
                            MaterialId = new Guid("042237d8-ce3e-4f5e-b79d-daad510a1dc4"),
                            OriginalPrice = 200000m,
                            Price = 299000m,
                            ProductId = new Guid("1dc01736-d7e2-4c24-94de-00844d5cb1f9"),
                            SizeId = new Guid("f6a1a967-7487-463b-9d7b-09aebf15d304"),
                            Status = 0,
                            Stock = 50
                        },
                        new
                        {
                            Id = new Guid("6a008d16-196e-40fe-ada5-2acf339fbede"),
                            ColorId = new Guid("24f04c0b-34c3-428c-8767-0bb98da225e0"),
                            CreatedDate = new DateTime(2023, 7, 3, 16, 24, 41, 198, DateTimeKind.Local).AddTicks(1460),
                            MaterialId = new Guid("042237d8-ce3e-4f5e-b79d-daad510a1dc4"),
                            OriginalPrice = 200000m,
                            Price = 299000m,
                            ProductId = new Guid("1dc01736-d7e2-4c24-94de-00844d5cb1f9"),
                            SizeId = new Guid("aa66fbee-a9d6-4bb5-8ed8-b329d394221f"),
                            Status = 0,
                            Stock = 50
                        });
                });

            modelBuilder.Entity("shop.Data.Entities.ProductImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProductDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductDetailId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("shop.Data.Entities.ProductInCategory", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoryId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProductId1")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CategoryId1");

                    b.HasIndex("ProductId1");

                    b.ToTable("ProductInCategories");

                    b.HasData(
                        new
                        {
                            ProductId = new Guid("1dc01736-d7e2-4c24-94de-00844d5cb1f9"),
                            CategoryId = new Guid("e785507b-109e-4c6e-b2f1-87a792896e3c")
                        },
                        new
                        {
                            ProductId = new Guid("3b997d7b-e67a-4b00-8e4a-043ce70b2844"),
                            CategoryId = new Guid("d8eb1629-a276-4667-8da2-0926fc66de0c")
                        });
                });

            modelBuilder.Entity("shop.Data.Entities.Promotion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("ApplyForAll")
                        .HasColumnType("bit");

                    b.Property<decimal?>("DiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("DiscountPercent")
                        .HasColumnType("int");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Promotions", (string)null);
                });

            modelBuilder.Entity("shop.Data.Entities.Size", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Sizes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("573566fb-4e8c-4dad-bb2c-b2d9a597d9f7"),
                            Name = "S",
                            SortOrder = 1
                        },
                        new
                        {
                            Id = new Guid("966f5bf6-a0a7-4d88-a700-728eb8e32c85"),
                            Name = "M",
                            SortOrder = 2
                        },
                        new
                        {
                            Id = new Guid("3cb61050-1fe6-4f5c-94a2-4db93e69c7ba"),
                            Name = "L",
                            SortOrder = 3
                        },
                        new
                        {
                            Id = new Guid("190d7f43-6bde-4d74-a58b-e50b22b35751"),
                            Name = "XL",
                            SortOrder = 4
                        },
                        new
                        {
                            Id = new Guid("f6a1a967-7487-463b-9d7b-09aebf15d304"),
                            Name = "XXL",
                            SortOrder = 5
                        },
                        new
                        {
                            Id = new Guid("aa66fbee-a9d6-4bb5-8ed8-b329d394221f"),
                            Name = "XXXL",
                            SortOrder = 6
                        });
                });

            modelBuilder.Entity("shop.Data.Entities.Cart", b =>
                {
                    b.HasOne("shop.Data.Entities.AppUser", "User")
                        .WithOne("Cart")
                        .HasForeignKey("shop.Data.Entities.Cart", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("shop.Data.Entities.CartDetail", b =>
                {
                    b.HasOne("shop.Data.Entities.ProductDetail", "ProductDetail")
                        .WithMany("CartDetails")
                        .HasForeignKey("ProductDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("shop.Data.Entities.Cart", "Cart")
                        .WithMany("CartDetails")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("ProductDetail");
                });

            modelBuilder.Entity("shop.Data.Entities.Order", b =>
                {
                    b.HasOne("shop.Data.Entities.AppUser", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("shop.Data.Entities.OrderDetail", b =>
                {
                    b.HasOne("shop.Data.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("shop.Data.Entities.ProductDetail", "ProductDetail")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("ProductDetail");
                });

            modelBuilder.Entity("shop.Data.Entities.ProductDetail", b =>
                {
                    b.HasOne("shop.Data.Entities.Color", "Color")
                        .WithMany("ProductDetails")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("shop.Data.Entities.Material", "Material")
                        .WithMany("ProductDetails")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("shop.Data.Entities.Product", "Product")
                        .WithMany("ProductDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("shop.Data.Entities.Size", "Size")
                        .WithMany("ProductDetails")
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Color");

                    b.Navigation("Material");

                    b.Navigation("Product");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("shop.Data.Entities.ProductImage", b =>
                {
                    b.HasOne("shop.Data.Entities.ProductDetail", "ProductDetail")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductDetail");
                });

            modelBuilder.Entity("shop.Data.Entities.ProductInCategory", b =>
                {
                    b.HasOne("shop.Data.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("shop.Data.Entities.Category", null)
                        .WithMany("ProductInCategories")
                        .HasForeignKey("CategoryId1");

                    b.HasOne("shop.Data.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("shop.Data.Entities.Product", null)
                        .WithMany("ProductInCategories")
                        .HasForeignKey("ProductId1");

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("shop.Data.Entities.AppUser", b =>
                {
                    b.Navigation("Cart")
                        .IsRequired();

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("shop.Data.Entities.Cart", b =>
                {
                    b.Navigation("CartDetails");
                });

            modelBuilder.Entity("shop.Data.Entities.Category", b =>
                {
                    b.Navigation("ProductInCategories");
                });

            modelBuilder.Entity("shop.Data.Entities.Color", b =>
                {
                    b.Navigation("ProductDetails");
                });

            modelBuilder.Entity("shop.Data.Entities.Material", b =>
                {
                    b.Navigation("ProductDetails");
                });

            modelBuilder.Entity("shop.Data.Entities.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("shop.Data.Entities.Product", b =>
                {
                    b.Navigation("ProductDetails");

                    b.Navigation("ProductInCategories");
                });

            modelBuilder.Entity("shop.Data.Entities.ProductDetail", b =>
                {
                    b.Navigation("CartDetails");

                    b.Navigation("OrderDetails");

                    b.Navigation("ProductImages");
                });

            modelBuilder.Entity("shop.Data.Entities.Size", b =>
                {
                    b.Navigation("ProductDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
